name: Terraform Apply (Staging)

on:
  push:
    branches:
      - main   # ‚úÖ Run automatically for staging deploys

jobs:
  terraform:
    name: Apply to Staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # Required for OIDC
      contents: read
    environment: staging

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::402298071739:role/GitHubActionsTerraformDevRole
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: infra/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('infra/.terraform.lock.hcl') }}

      - name: Install & Build Backend
        working-directory: backend
        run: |
          set -e
          echo "üì¶ Installing backend dependencies..."
          npm ci
          echo "üî® Building backend..."
          npm run build
          if [ ! -f dist/tickets.js ]; then
            echo "‚ùå ERROR: dist/tickets.js missing"
            exit 1
          fi
          echo "‚úÖ Backend build complete"

      - name: Copy Built Lambda to Infra
        run: |
          mkdir -p infra/backend-dist
          cp backend/dist/tickets.js infra/backend-dist/
          echo "‚úÖ Copied tickets.js to infra/backend-dist"

      - name: Terraform Init + Validate Workspace
        working-directory: infra
        run: |
          terraform init \
            -backend-config="bucket=hashir-tf-remote-state" \
            -backend-config="key=mini-helpdesk/staging/infra.tfstate" \
            -backend-config="region=us-east-1"

          # Fail if staging does not exist (don't auto-create)
          if ! terraform workspace list | grep -q "staging"; then
            echo "‚ùå ERROR: Terraform workspace 'staging' does not exist. Please create it manually."
            exit 1
          fi

          terraform workspace select staging
          echo "‚úÖ Selected Terraform workspace: staging"

          # üöÄ Unlock any stale lock automatically
          LOCK_ID=$(terraform force-unlock -list 2>/dev/null | grep -oE '[0-9a-f-]+' || true)
          if [ ! -z "$LOCK_ID" ]; then
            echo "‚ö†Ô∏è Found stale lock ($LOCK_ID), unlocking..."
            terraform force-unlock -force "$LOCK_ID" || true
          fi

      - name: Terraform Apply (Staging)
        working-directory: infra
        run: |
          terraform apply -auto-approve -no-color -lock-timeout=5m \
            -var="frontend_bucket_name=${{ secrets.AWS_S3_BUCKET }}"
          echo "‚úÖ Terraform Apply completed for staging"
